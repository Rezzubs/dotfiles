#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle init.el

* CORE
#+begin_src elisp
  (use-package emacs
    :config
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-face-attribute 'default nil :family "JetBrains Mono" :height 140)

    :custom
    ;; default modes
    (show-paren-mode t)
    (electric-indent-mode t)

    ;; UI cleanup
    (menu-bar-mode nil)
    (tool-bar-mode nil)
    (scroll-bar-mode nil)
    (inhibit-startup-screen t)
    (initial-scratch-message "")

    (hilight-tabs t)
    (show-trailing-whitespace t)
    (display-line-numbers-type 'relative)
    (help-window-select t)

    ;; Remove bacup files
    (make-backup-files nil)
    (backup-inhibited t)
    (auto-save-default nil)

    :hook
    (before-save . whitespace-cleanup)
    (before-save . (lambda () (delete-trailing-whitespace)))
    (prog-mode . electric-pair-mode)
    (prog-mode . display-line-numbers-mode))
#+end_src

* PACKAGING
#+begin_src elisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+end_src
** Use-Package
#+begin_src elisp
  (if init-file-debug
      (setq use-package-verbose t
	    use-package-expand-minimally nil
	    use-package-compute-statistics t
	    debug-on-error t)
    (setq use-package-verbose nil
	  use-package-expand-minimally t))
#+end_src
* ORG
#+begin_src elisp
  (use-package org)

  ;; structured templates
  (use-package org-tempo)
#+end_src
* COMPLETION
** Vertico
#+begin_src elisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    (setq vertico-count 20))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
** Orderless
#+begin_src elisp
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia
#+begin_src elisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
** Corfu
#+begin_src elisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    :bind
    (:map corfu-map
	  ("RET" . nil))
    :init
    (global-corfu-mode))

  ;; Extensions
  (use-package corfu-popupinfo
    :after corfu
    :config (corfu-popupinfo-mode))
  (use-package corfu-history
    :after corfu
    :config (corfu-history-mode))
#+end_src
* CATPPUCCIN
#+begin_src elisp
  (use-package catppuccin-theme
    :ensure t
    :init
    (load-theme 'catppuccin :no-confirm))
#+end_src
* EVIL
#+begin_src elisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init)
    :custom
    (evil-disable-insert-state-bindings t))

  (use-package evil-escape
    :ensure t
    :init
    (evil-escape-mode)
    :custom
    (evil-escape-key-sequence "jk"))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-nerd-commenter
    :ensure t
    :config
    (evilnc-default-hotkeys))

  (use-package evil-textobj-tree-sitter
    :ensure t
    :after evil
    :config
    ;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
    (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
    ;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
    (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner")))
#+end_src
* WHICH-KEY
#+begin_src elisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* HL-TODO
#+begin_src elisp
(use-package hl-todo
  :ensure t
  :init (global-hl-todo-mode)
  :custom
  (hl-todo-keyword-faces '(("TODO"   . "#F9E2AF")
			   ("FIXME"  . "#F38BA8"))))
#+end_src
* MODELINE
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
* TREE-SITTER
#+begin_src elisp
  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    :hook (tree-sitter-after-on . tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t)
#+end_src
* LANGUAGES
** Lsp
#+begin_src elisp
  (use-package eglot)

#+end_src
** Go
#+begin_src elisp
  (use-package go-mode
    :ensure t
    :hook (go-mode . eglot-ensure))
#+end_src
* MAGIT
#+begin_src elisp
      (use-package magit
	:ensure t)

      (use-package magit-todos
	:ensure t
	:after magit
	:config (magit-todos-mode 1))
#+end_src
* RAINBOW DELIMITERS
#+begin_src elisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
