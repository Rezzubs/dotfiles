import Data.Map qualified as M
import System.Exit (exitSuccess)
import XMonad
import XMonad.Hooks.EwmhDesktops
import XMonad.Layout.Spacing
import XMonad.StackSet qualified as W
import XMonad.Layout.NoBorders

myTerminal = "wezterm"

myFocusFollowsMouse = True

myClickJustFocuses = False

myBorderWidth = 2

myModMask = mod4Mask

myWorkspaces = ["1", "2", "3", "4", "5", "6"]

-- myKeys :: XConfig Layout -> M.Map (ButtonMask, KeySym) (X ())
myKeys conf@(XConfig {XMonad.modMask = modKey}) =
  M.fromList $
    [ ((modKey, xK_t), spawn $ terminal conf), -- terminal
      ((modKey, xK_p), spawn "dmenu_run"),
      ((modKey, xK_b), spawn "firefox-bin"),
      ((modKey .|. shiftMask, xK_p), spawn "pavucontrol"),
      ((modKey, xK_e), spawn "emacsclient -c --alternate-editor emacs"),
      ((0, xK_Print), spawn "flameshot gui"),
      ((modKey .|. shiftMask, xK_Escape), spawn $ terminal conf <> " -e htop"),
      -- WINDOWING
      ((modKey, xK_w), kill), -- close window
      ((modKey, xK_Tab), sendMessage NextLayout), -- switch layout
      --  Reset the layouts on the current workspace to default
      ((modKey .|. shiftMask, xK_space), setLayout $ XMonad.layoutHook conf),
      ((modKey, xK_j), windows W.focusDown), -- focus next
      ((modKey, xK_k), windows W.focusUp), -- focus previous
      ((modKey, xK_m), windows W.focusMaster), -- focus master
      ((modKey, xK_Return), windows W.swapMaster), -- swap master
      ((modKey .|. shiftMask, xK_j), windows W.swapDown), -- swap next
      ((modKey .|. shiftMask, xK_k), windows W.swapUp), -- swap previous
      ((modKey, xK_h), sendMessage Shrink), -- shrink master
      ((modKey, xK_l), sendMessage Expand), -- expand master
      ((modKey, xK_v), withFocused $ windows . W.sink), -- set tile
      ((modKey, xK_i), sendMessage (IncMasterN 1)), -- increment master count
      ((modKey, xK_o), sendMessage (IncMasterN (-1))), -- decrement master count

      -- SYSTEM
      ((modKey .|. shiftMask, xK_q), io exitSuccess), -- Quit xmonad
      ((modKey, xK_q), spawn "xmonad --recompile && xmonad --restart"), -- Restart xmonad
      ((modKey .|. shiftMask .|. controlMask, xK_r), spawn "loginctl reboot"), -- reboot pc
      ((modKey .|. shiftMask .|. controlMask, xK_s), spawn "loginctl poweroff"), -- shut down pc
      ((modKey .|. shiftMask, xK_s), spawn "loginctl suspend") -- suspend pc
    ]
      <> [ ((m .|. modKey, k), windows $ f i)
           | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9],
             (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]
         ]
      <> [ ((m .|. modKey, key), screenWorkspace sc >>= flip whenJust (windows . f))
           | (key, sc) <- zip [xK_comma, xK_period] [1, 0],
             (f, m) <- [(W.view, 0), (W.shift, shiftMask)]
         ]

myMouseBindings (XConfig {XMonad.modMask = modm}) =
  M.fromList
    -- move with mod + left mouse
    [ ( (modm, button1),
        \w -> do
          focus w
          mouseMoveWindow w
          windows W.shiftMaster
      ),
      -- resize with mod + right mouse
      ( (modm, button3),
        \w -> do
          focus w
          mouseResizeWindow w
          windows W.shiftMaster
      )
    ]

-- LAYOUTS --

layouts = smartSpacingWithEdge 5 tiled ||| noBorders Full
  where
    tiled = Tall nmaster delta ratio
    nmaster = 1 -- number of master windows.
    ratio = 1 / 2 -- default screen ratio
    delta = 3 / 100 -- % change

-- HOOKS --

myManageHook =
  composeAll
    [className =? "discord" --> doShift "2"]

myStartupHook = do
  spawn "discord"

-- ACTUAL SETUP --

conf =
  def -- This is just an `XConfig` instance
    { terminal = "wezterm",
      modMask = mod4Mask,
      normalBorderColor = "#1e1e2e",
      focusedBorderColor = "#b4befe",
      borderWidth = 2,
      workspaces = myWorkspaces,
      keys = myKeys,
      layoutHook = layouts,
      manageHook = myManageHook,
      startupHook = myStartupHook
    }

main = xmonad $ ewmhFullscreen $ ewmh $ conf
