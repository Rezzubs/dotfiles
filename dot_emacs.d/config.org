#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: t

* Common Options
** Defaults

#+begin_src emacs-lisp
  ;; start an emacs server
  (server-start)

  ;; remove bloat
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-screen t
	fill-column 100
	confirm-kill-emacs #'y-or-n-p
	window-resize-pixelwise t
	frame-resize-pixelwise t
	initial-scratch-message ""
	read-file-name-completion-ignore-case t
	dired-kill-when-opening-new-dired-buffer t)


  (setq-default major-mode
		(lambda () ; guess major mode from file name
		  (unless buffer-file-name
		    (let ((buffer-file-name (buffer-name)))
		      (set-auto-mode)))))

  ;; default modes FIXME
  (save-place-mode t)
  (savehist-mode t)
  (recentf-mode t)
  (setq auto-revert-mode t)
  (electric-pair-mode t)
  (electric-indent-mode t)

  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  (keymap-global-set "C-c s" 'scratch-buffer)

#+end_src

** Packaging
[[info:use-package][use-package User Manual]]

#+begin_src emacs-lisp
  (require 'package)

  ;; add melpa to package-archives

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; enable auto install
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

#+end_src

** Visual
*** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 140)

#+end_src

*** Modeline
[[https://github.com/seagle0128/doom-modeline][Doom Modeline (github)]]

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 40))

#+end_src

*** Color Theme
[[https://github.com/catppuccin/emacsf][Catppuccin for Emacs (github)]]

#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (load-theme 'catppuccin :no-confirm))

#+end_src

*** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
    
*** Highlight TODO
#+begin_src emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode t))

#+end_src

* Org Mode
[[info:org][Org Mode Manual]]

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-directory "~/org/")
    (require 'org-tempo)

    :config
    (setq org-agenda-files (list org-directory)
          org-capture-templates '(("t" "Todo" entry (file+headline "todo.org" "Inbox")
                                   "* TODO %?\n  %i\n  %a")
                                  ("j" "Journal" entry (file+datetree "journal.org")
                                   "* %?\nEntered on %U\n  %i\n  %a"))
          org-return-follows-link t
          ;; make org pretty
          org-hide-emphasis-markers t
          org-link-descriptive t
          org-pretty-entities t)

          :bind (("C-c l" . org-store-link)
                 ("C-c a" . org-agenda)
                 ("C-c c" . org-capture))

          :hook (org-mode . org-indent-mode))

  #+end_src

** Org Appear
Toggle beautification based on cursor location.

#+begin_src emacs-lisp
  (use-package org-appear
      :hook (org-mode . org-appear-mode)
      :config
      (setq org-appear-autoemphasis t
            org-appear-autolinks t
            org-appear-autosubmarkers t
            org-appear-autoentities t))

#+end_src

** Auto Tangle
set ~#+auto_tangle: t~ in your org file to automatically tangle /src blocks/.

#+begin_src emacs-lisp
      (use-package org-auto-tangle
        :defer t
        :hook (org-mode . org-auto-tangle-mode))

#+end_src

* Utility
** Vertico
[[https://github.com/minad/vertico][github]]

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Show more candidates
    (setq vertico-count 20))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Configure directory extension. (nicer navigation)
  (use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Which-key
[[https://github.com/justbur/emacs-which-key][github]]

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode))

#+end_src

** TODO Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

#+end_src

* Editing
** Expand Region
~C-=~ to expand ~C-- C-=~ to contract.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))

#+end_src

** Jumping to Text
[[https://github.com/abo-abo/avy][Avy (github)]]

#+begin_src emacs-lisp
    (use-package avy
      :bind ("C-:" . avy-goto-char-2))

#+end_src
