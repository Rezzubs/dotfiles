#!/bin/env python

from pathlib import Path
import sys

GAME_ROOT = Path("~/.local/share/honkers-railway-launcher/HSR").expanduser()

if not GAME_ROOT.exists():
    raise RuntimeError(f"`{GAME_ROOT}` doesn't exist")

CACHE_DIR = GAME_ROOT.joinpath("StarRail_Data/webCaches")

if not CACHE_DIR.exists():
    raise RuntimeError(
        f"Cache direcory doesn't exist at `{CACHE_DIR}`\n"
        "Try opening warp records in game"
    )


def is_newer(lhs: Path, rhs: Path) -> bool:
    lhs_version = [int(x) for x in lhs.name.split(".")]
    rhs_version = [int(x) for x in rhs.name.split(".")]

    assert len(lhs_version) == len(rhs_version)
    for l_segment, r_segment in zip(lhs_version, rhs_version):
        if l_segment > r_segment:
            return True
        if l_segment < r_segment:
            return False
    raise ValueError(f"{lhs} and {rhs} are equal")


latest = None
for subdir in CACHE_DIR.iterdir():
    if not subdir.is_dir():
        print(f"WARN: {subdir} is not a directory", file=sys.stderr)
        continue
    if latest is None:
        latest = subdir
        continue
    if is_newer(subdir, latest):
        latest = subdir
if latest is None:
    raise RuntimeError(
        f"There is no cached data at {CACHE_DIR}\nTry opening warp records in game"
    )

data_path = latest.joinpath("Cache/Cache_Data/data_2")

with open(data_path, encoding="utf-8", errors="replace") as file:
    data = file.read()

final_record_idx = None
for _ in range(100_000):
    idx = data.find("gacha_record", (final_record_idx or 0) + 1)
    if idx == -1 or idx == final_record_idx:
        break
    final_record_idx = idx
else:
    raise RuntimeError("There are way more records than expected.")
if final_record_idx is None:
    raise RuntimeError("Couldnt find gacha records in the data file")

start_pattern = "https"
start_offset = data[:final_record_idx][::-1].find(start_pattern[::-1])
assert start_offset != -1
start_offset += len(start_pattern)

start_idx = final_record_idx - start_offset

end_pattern = "end_id"
end_idx = data.find(end_pattern, final_record_idx)
assert end_idx != -1
end_idx += len(end_pattern)

for _ in range(10_000):
    next = end_idx + 1
    if not data[next].isdigit():
        break
    end_idx = next
else:
    raise RuntimeError(
        "Couldn't find the end of the pattern or it's longer than expected."
    )

print(data[start_idx : end_idx + 1])
